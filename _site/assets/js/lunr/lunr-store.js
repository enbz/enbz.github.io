var store = [{
        "title": "Minimal Mistakes - 카테고리에서 리스트뷰/그리드뷰 전환 버튼 만들기",
        "excerpt":"Minimal Mistakes 테마로 블로그를 만들면 카테고리는 보통 아래 그림처럼 줄글 목록, 즉 리스트뷰로 보이게 됩니다.             기본 카테고리 리스트뷰 모습 (예시)   사실 리스트뷰도 크게 불편하진 않지만, 그리드뷰로 썸네일과 함께 글 목록을 보는 것이 더 편할 때가 있는데요.   몇 가지 코드만 수정해주면, 카테고리 글 목록에서 리스트뷰/그리드뷰를 전환해주는 버튼을 추가할 수 있습니다.           1. category.html 수정   먼저 모든 카테고리에 대해서 레이아웃을 바꾼다고 가정하여, /_layout/category.html 파일 전체를 다음과 같이 수정합니다.             2. _archive.scss에 버튼 클래스 추가   위 코드에서 9-10번 줄에 나오는 view-switch와 view_btn 클래스를 /_sass/minimal-mistakes/_archive.scss에 정의하여줍니다. 다른 코드는 건드리지 않고 끝 부분에 아래 코드를 추가해주기만 하면 됩니다.             3. 각 카테고리 md 파일 적절하게 수정   minimal mistakes에서 카테고리 페이지가 md 형식으로 있을텐데, layout: category에서 모든 정보를 불러왔으므로 front matter를 제외하고 나머지 코드는 다 지웁니다. 카테고리 페이지는 /_pages/categories/~~~.md 형태로 저장되어 있을 것입니다.   다음은 내 블로그 카테고리인 “일상”에 해당하는 daily.md 파일 예시입니다. 아래 코드에서 title, permalink, taxonomy를 각자 사용목적에 맞게 변경하면 됩니다. 또한, paginator 등 각자에게 맞는 추가적인 기능도 넣어도 무방합니다.     이 때 주의할 점은, taxonomy 이름은 title과 같게 해야한다는 것입니다. 그 이유는, category.html에서 taxonomy와 정확히 일치하는 카테고리의 글들만 보여주도록 구현했기 때문입니다.           4. 아이콘 이미지 넣기   이제 마지막으로 버튼에 사용될 아이콘을 asset 폴더에 넣으면 끝입니다. 구글링해봤지만 다 loyalty가 있는 이미지밖에 없어서 제가 직접 파워포인트로 만들었습니다.         위 파일들을 저장해서 적당한 폴더에 넣으면 됩니다.   category.html을 위 코드 그대로 작성했다고 치면   /assets/images/list_view_icon.png   /assets/images/grid_view_icon.png   가 맞는 경로와 이름이 됩니다.           5. 썸네일 이미지 추가하기 (옵션)   이로써 그리드/리스트뷰 전환 구현이 끝났습니다.   하지만 포스트를 올릴 때 썸네일을 추가해주지 않으면, 그리드뷰로 전환해도 심심하게 보일텐데요.   좀 더 풍부한 시각적 효과를 위해서, 귀찮지만 썸네일을 포스트의 front matter의 teaser: 부분에 추가해주었습니다. 덧붙여, 썸네일 아래 미리보기로 텍스트의 일부가 나오는데, 이 부분을 따로 설정하고 싶다면 excerpt: 부분에 따로 입력해줄 수 있습니다. 만약 설정하지 않는다면 포스트의 첫 문장이 나오게됩니다.         결과는 다음과 같습니다.             최종 리스트뷰/그리드뷰 전환 모습   이렇게 minimal mistakes에서 리스트뷰/그리드뷰 전환 기능이 완성되었습니다.      ","categories": ["프로젝트","블로그 꾸미기"],
        "tags": ["github blog","Jekyll","Minimal Mistakes","css","html","커스터마이징","그리드뷰","리스트뷰"],
        "url": "/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%BE%B8%EB%AF%B8%EA%B8%B0/minimal-mistakes-list-grid-view/",
        "teaser": "/assets/images/grid_teaser-8.png"
      },{
        "title": "Spicetify로 스포티파이 테마 바꾸기",
        "excerpt":"PC앱 환경에서 사용하기 좋은 스포티파이용 플랫폼 툴 spicetify와 제가 쓰는 플러그인을 소개하고자 합니다. (아마 유명해서 알 사람은 다 알 듯)           0. spicetify 소개   공식 홈페이지 주소   spicetify 공식 홈페이지 주소입니다. 참고로 스포티파이 웹페이지가 아닌 스포티파이 데스크톱 앱에만 적용됩니다.   스포티파이 앱 설치 주소           1. 설치 방법 (marketplace 추가 버전)   1-1. Windows   윈도우 기준 powershell을 실행하고, 다음 명령어를 입력합니다.   iwr -useb https://raw.githubusercontent.com/spicetify/marketplace/main/resources/install.ps1 | iex   기본 버전에는 없는 사이드바가 생겨서 플러그인 설치가 편리해집니다.   1-2. Linux, MacOS   윈도우와 유사하게 shell에 아래 코드를 입력합니다.   curl -fsSL https://raw.githubusercontent.com/spicetify/marketplace/main/resources/install.sh | sh           2. 사용 후기   설치한 후 스포티파이를 실행하면 왼쪽 위에 marketplace 메뉴가 생깁니다. 클릭하면 확장기능, 테마, 스니펫 등등을 골라 설치할 수 있습니다.      저는 현재 daksh2k의 Full Screen 기능과 JulienMaille의 Default Dynamic을 테마를 사용하고 있는데요,   Full Screen은 음악 재생 중에 우측 하단의 버튼을 클릭하면 전체 화면으로 가사를 감상할 수 있는 기능입니다. 컴퓨터로 노래를 틀어놓고 다른 작업을 할 때 좋았습니다.         Default Dynamic은 앨범 자켓 이미지에 맞춰서 색이 바뀌는 테마여서, 소소하게 마음에 들었습니다.   light/dark도 설정할 수 있습니다.             Default Dynamic 테마   다른 느낌 좋은 테마가 나오면 업데이트 해보겠습니다.   3. (적용이 안될 때)업데이트하기   스포티파이가 업데이트될 때마다 spicetify가 적용이 안되는 현상이 발생하는데, spicetify를 업데이트 해주면 정상적으로 적용이 되는 것을 확인하였습니다.   powershell 또는 shell을 실행해서 아래 코드만 입력해주면 됩니다.   spicetify update           ","categories": ["이모저모","일상"],
        "tags": ["powershell","spotify","블로그","플러그인","커스터마이징","스포티파이","테마","spicetify"],
        "url": "/%EC%9D%B4%EB%AA%A8%EC%A0%80%EB%AA%A8/%EC%9D%BC%EC%83%81/spicetify/",
        "teaser": "/assets/images/250609/00.png"
      },{
        "title": "웹페이지에 마우스 커서 이펙트 추가하기",
        "excerpt":"옛날 홈페이지에서 자주 보던 y2k 감성의 마우스 커서 효과를 블로그에 적용해보고싶었는데, 마침 적절한 사이트를 발견해서 소개해드립니다.             마우스 커서 이펙트 적용 모습   깃허브 링크: 90s cursor effects   Jekyll과 같은 GitHub Pages나 자체 웹사이트 등 Markdown이 HTML을 지원하는 환경이면 간단하게 적용 가능합니다.   1. 페이지 전체에 커서 효과 적용   먼저 해당 페이지 전체에 커서 효과를 적용하고 싶은 경우, 아래의 스크립트를 넣습니다.   &lt;script type=\"module\"&gt;   import { bubbleCursor } from \"https://unpkg.com/cursor-effects@latest/dist/esm.js\";   new bubbleCursor(); &lt;/script&gt;   저는 Jekyll 블로그에 md 형식으로 포스트를 올리는데, 위 스크립트를 md 파일에 삽입할 경우 커서 효과가 잘 작동하는 것을 확인했습니다.   혹은, 아래 CDN 링크를 사용해서 스크립트를 삽입해도 됩니다.   &lt;script src=\"https://cdn.jsdelivr.net/npm/cursor-effects@latest/dist/browser.js\"&gt;&lt;/script&gt; &lt;script&gt;   new bubbleCursor(); &lt;/script&gt;   2. 특정 element에서만 커서 효과 적용   만약 특정 영역에서만 커서 효과를 넣고 싶다면, 아래와 같이 작성하면 됩니다.   &lt;div id=\"effect-box\" style=\"width: 850px; height: 300px; border: 2px solid #000; position: relative;\"&gt;   마우스를 올려보세요! &lt;/div&gt;  &lt;script type=\"module\"&gt;   // 특정 영역에만 효과 적용   import { bubbleCursor } from \"https://unpkg.com/cursor-effects@latest/dist/esm.js\";   const box = document.getElementById('effect-box');   new bubbleCursor({ element: box }); &lt;/script&gt;       실행화면🔽:      🐟bubbleCursor - 마우스를 올려보세요!     3. 마우스 커서 효과 종류들   90s cursor effects에서 제공하는 커서 효과 목록은 아래와 같습니다. 위 코드에서 bubbleCursor를 다른 커서로 바꾸어주기만 하면 됩니다.      🌈rainbowCursor - 마우스를 올려보세요!            🧚‍♀️fairyDustCursor - 마우스를 올려보세요!            👻ghostCursor - 마우스를 올려보세요!            😀emojiCursor - 마우스를 올려보세요!            ❄snowflakeCursor - 마우스를 올려보세요!            ⏲clockCursor - 마우스를 올려보세요!            🖱trailingCursor - 마우스를 올려보세요!            🚩textFlag - 마우스를 올려보세요!            🤪springyEmojiCursor - 마우스를 올려보세요!            ⚫followingDotCursor - 마우스를 올려보세요!            🅰characterCursor - 마우스를 올려보세요!         4. 색깔, 텍스트 등 세부옵션 조정   몇몇 커서 종류는 색이나 텍스트, 이모티콘을 바꿀 수 있습니다. 그 중 몇가지만 소개드리면 아래와 같습니다. 예를 들어 fairyDustCursor의 경우, 아래와 같이 입자효과 색상을 지정할 수 있습니다.   new fairyDustCursor({ colors: [\"#b560eb\", \"#f7c4f3\", \"#c4d0f7\"], element: box2 });   emojiCursor에서 이모티콘의 종류, 간격을 지정하려면 아래와 같이 입력합니다.   new emojiCursor({ emoji: [\"🦄\", \"🔮\", \"🎀\"], delay: 25 });   textFlag에서 텍스트의 종류, 색상은 아래와 같이 변경할 수 있습니다. 한글도 잘 나오더라구요!   new textFlag({text: \"Hello world!\", color: [\"#ee9df5\"]});   기타 자세한 세부옵션 조정은 90s cursor effects 링크를 참조해주세요!   ","categories": ["프로젝트","블로그 꾸미기"],
        "tags": ["github blog","Jekyll","Minimal Mistakes","css","html","y2k","블로그","마우스 효과","커서 효과","커스터마이징"],
        "url": "/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%BE%B8%EB%AF%B8%EA%B8%B0/mouse-cursor-effects/",
        "teaser": "/assets/images/250624/000.png"
      },{
        "title": "Github Actions로 Jekyll 블로그 빌드하기 - 왜 필요할까? 간단 정리",
        "excerpt":"Github Pages로 Jekyll 블로그를 호스팅하면서, 여러가지 Jekyll 플러그인들을 적용하다보면 어떤 기능은 로컬에서는 잘 작동하다가 배포 후에는 작동하지 않는 경우가 있습니다. 저도 그랬었는데요.   이 문제를 해결하기 위해 구글링을 하다가 Github Pages의 빌드 과정에서 이슈가 발생했다는 것을 알게 되었습니다.   1. 왜 플러그인 설치가 안될까? Github Pages의 빌드 과정에 대해 알아보자   Github Pages로 웹사이트 혹은 블로그를 호스팅하는 과정은 대강 다음과 같은데요.   먼저 사용자가 HTML, Markdown(.md), css 등 블로그를 이루는 정적파일들을 특정 브랜치(main이나 gh-pages 등)에 push하면 Github Pages는 이 파일들의 내용을 웹에 표시함으로써 블로그를 배포해줍니다.   그런데 Jekyll 블로그는 일반적인 HTML 파일만이 아니라 .md, _config.yml, Liquid 템플릿 문법 등 편의를 위해 여러 개발자 친화적인 포맷으로 작성됩니다. 그래서 빌드라고 불리는 과정이 꼭 필요한데요.   블로거들이 md로 글을 작성해도 결국에는 HTML로 변환하는 빌드 과정이 필요하다는 것이죠. 이 외에도 아래와 같은 복잡한 작업들이 빌드 과정에 들어갑니다.      Github Pages는 이러한 과정을 알아서 자동 빌드해주는 기능이 있지만, 문제는 Github Pages에서 정해놓은 공식허용 플러그인만 사용할 수 있다는 점입니다. 그래서 이러한 화이트리스트에 없는 서드파티 플러그인이나 원하는 Jekyll 버전을 설치해서 쓰고 싶은 경우, 기본 빌드가 아닌 커스텀 빌드가 필수적입니다.   2. Github Actions란?   Github Pages의 기본 빌드는 Jekyll만 지원하고, Jekyll 플러그인 또한 제한합니다.   반면 Github Actions는 Jekyll뿐만 아니라 React, Vue, Hugo 등등 다양한 빌드 시스템을 모두 지원하여 더욱 범용적입니다.   그리고 Jekyll 플러그인 제한도 없으므로 커스터마이징이 훨씬 자유롭다는 장점이 있습니다.   이 외에도 빌드 환경, branch 설정, 빌드 시점 등 모든 것을 사용자 입맛에 맞게 설정할 수 있습니다.   3. Github Pages를 Github Actions로 빌드해보자   먼저 깃허브의 블로그 리포지토리의 위쪽에 있는 Settings 탭을 클릭한 다음 Code and automaton 메뉴 아래에 있는 Pages를 클릭합니다.      Build and deployment 아래의 Source 드롭다운 메뉴를 Github Actions로 설정해주세요.      이번에는 상단의 Actions 탭으로 가서 New workflow를 시작한 다음 Jekyll을 찾습니다.      Jekyll workflow 아래에 configure를 클릭합니다. (Github Pages Jekyll이 아닌 그냥 Jekyll입니다!)      이대로 다 하셨으면 commit changes를 클릭합니다.      이제 branch에 업데이트를 할 때마다 action이 자동적으로 실행하면서 빌드가 될 것입니다. 빌드 내역은 Actions 탭에서 언제든 확인할 수 있습니다.      출처: Jekyll 공식 홈페이지   ","categories": ["프로젝트","블로그 꾸미기"],
        "tags": ["github blog","Jekyll","Minimal Mistakes","Github Actions","Github Pages"],
        "url": "/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%BE%B8%EB%AF%B8%EA%B8%B0/github-actions/",
        "teaser": "/assets/images/250709/04.png"
      }]
